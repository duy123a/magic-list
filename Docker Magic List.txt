(sudo)
docker run "image name" : run image (and download/install if it doesn't has)
docker start 'container id/ container name': start containter again
docker ps: show list of running container
docker ps -a: show list of container whenever running or stopped
docker stop "container id/ container name": stop a container running
docker rm "container id/ container name": remove a container
docker images: show image list
docker rmi "image name" : remove image
docker pull "image name" : download and install image
docker exec "container id/ container name" "command" : execute a command in the container

docker run -d "image name" : run in the detach mode (useful if you want to use cmd again)
docker attach "container id/ container name" : attach container again

docker stop $(docker ps -a -q) : stop all container
docker rm $(docker ps -a -q) : remove all container

docker run "image name":"tag" : run image with tag version, for example run redis:4.0
docker run - i "image name": run at interactive mode (you can input in the cmd)
docker run - it "image name": same above but with pseudo terminal so you can red the prompt
docker run --name "name of container" "image name" : run image with custom container name

docker rmi -f $(docker images -aq) : delete all images
docker image prune -a: delete all unused and dangling images

The internal IP of docker is 172.17.0.2
The public IP of docker is 192.168.1.5 (need port mapping)

docker run -p "public port":"internal port" "image name" : run image with port mapping
docker run -v "map path":"original path" "image name" : run image with volume mapping, if you don't map when you remove the container all data will be rip as well
Example: docker run -v /opt/datadir:/var/lib/mysql mysql : run mysql with volume mapping

docker inspect "container id/ container name" : inspect container
docker logs "container id/ container name" : show log of detach container

docker run -e "ENV key"="ENV value" "image name" : run image with env variables
docker run --entry-point "entry point cmd" "image name" "command" : run image with overwriting entry-point (command will always overwriting)

docker volume ls: check list volume
docker volume create 'volume name': create volume
docker volume rm 'volume name': delete volume

Read log from docker container
docker logs --since=1h 'container_id'

Or export to txt file
docker logs --since=1h 'container_id' > /path/to/save.txt

docker run --name sqlserver -p 1433:1433 -v mssql:/var/opt/mssql -e SA_PASSWORD=7551656As! -e ACCEPT_EULA=Y -d mcr.microsoft.com/mssql/server:2017-latest
docker run --name sqlserver -p 1433:1433 -v mssql:/var/opt/mssql -e MSSQL_SA_PASSWORD=7551656As! -e ACCEPT_EULA=Y -d mcr.microsoft.com/mssql/server:2019-latest
docker run --name sqlserver -p 1433:1433 -v mssql:/var/opt/mssql -e MSSQL_SA_PASSWORD=7551656As! -e ACCEPT_EULA=Y -d mcr.microsoft.com/mssql/server:2022-latest

In case you can't run due to permission (likely u don't have permission in mssql inside docker)
docker volume create mssql  # Ensure the volume exists
sudo chown -R 10001:0 /var/lib/docker/volumes/mssql/_data  # Give SQL Server user access
sudo chmod -R 770 /var/lib/docker/volumes/mssql/_data  # Allow read/write access

hostname -I
You can connect to SSMS by using Linux Public Id, public port
Example: 172.24.17.122,1433

docker exec -it sqlserver 'bash'
cd /opt/mssql-tools/bin/
./sqlcmd -U SA -P 7551656As!

select name from master.dbo.sysdatabases

See list of volume
docker volume list
Remove unused volume
docker volume rm $(docker volume ls -qf dangling=true)

* Restore database from external disk, need to move its docker location first
docker exec -i <docker container id> bash -c 'cat > /var/opt/mssql/backup.bak' < '/home/duy123a/DWH_Sanrin_20231218.bak'

Run this query first (to know the logical and physical name of the data file)
RESTORE FILELISTONLY FROM DISK = '/var/opt/mssql/backup.bak';

RESTORE DATABASE DWH_Sanrin
FROM DISK = '/var/opt/mssql/backup.bak'
WITH 
    MOVE 'DWH' TO '/var/opt/mssql/data/DWH_Sanrin.mdf',
    MOVE 'DWH_log' TO '/var/opt/mssql/data/DWH_Sanrin_log.ldf',
    FILE = 1, 
    NOUNLOAD, 
    REPLACE, 
    STATS = 5;
(In case there is the same logical name in the database before, need to change the logical name)
ALTER DATABASE DWH_Sanrin MODIFY FILE (NAME = 'DWH', NEWNAME = 'DWH_Sanrin');
ALTER DATABASE DWH_Sanrin MODIFY FILE (NAME = 'DWH_log', NEWNAME = 'DWH_Sanrin_log');

Delete the backup file if u want
docker exec -it ec711 rm /var/opt/mssql/backup.bak

OR: docker exec -it sqlserver bash (so see inside the image)

* Backup database and move it to external disk
Use magic query first
DECLARE @RootPath VARCHAR(MAX);
DECLARE @DatabaseName VARCHAR(MAX);
DECLARE @BackupPath VARCHAR(MAX);
DECLARE @Extend VARCHAR(MAX);
select db_name()
SELECT	@RootPath = '',
		@DatabaseName = DB_NAME(),
		@Extend = 'MUSTBACKUP',
		@BackupPath = @RootPath
			+ @DatabaseName
			+ '_'
			+ FORMAT(GETDATE(), 'yyyyMMdd_hhmmss')
			+ IIF(@Extend <> '', '_' + @Extend, '')
			+ '.bak';

BACKUP DATABASE @DatabaseName TO DISK = @BackupPath;
GO

It should save inside the container

You can check the contain inside container (sqlserver is the name of the volume i think, or u can use container id)
docker exec -it sqlserver /bin/bash
cd /var/opt/mssql
ls -la

I find it at /var/opt/mssql/data

Exit the container
exit

Copy the Backup File to Your Home Folder
docker cp sqlserver:/var/opt/mssql/data/DWH_Sanrin_VS2022_20250220_110347_MUSTBACKUP.bak ~/DWH_Sanrin_VS2022_20250220_110347_MUSTBACKUP.bak

Delete the old one
docker exec sqlserver rm /var/opt/mssql/data/DWH_Sanrin_VS2022_20250220_110347_MUSTBACKUP.bak
